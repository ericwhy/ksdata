// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ksdata.context;

#nullable disable

namespace ksdata.context.pgsql.Migrations
{
    [DbContext(typeof(KsUserContextPg))]
    partial class KsUserContextPgModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ksdata.models.KsLoginFailureEntity", b =>
                {
                    b.Property<string>("KsUserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character(60)")
                        .HasColumnName("ks_user_id")
                        .IsFixedLength();

                    b.Property<DateTime>("FailDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fail_dt");

                    b.HasKey("KsUserId", "FailDt")
                        .HasName("ks_user_login_failure_PK");

                    b.ToTable("ks_user_login_failure", "ks");
                });

            modelBuilder.Entity("ksdata.models.KsUserEntity", b =>
                {
                    b.Property<string>("KsUserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character(60)")
                        .HasColumnName("ks_user_id")
                        .IsFixedLength();

                    b.Property<string>("AllowAccessFlg")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("character(1)")
                        .HasColumnName("allow_access_flg")
                        .IsFixedLength();

                    b.Property<string>("AuthPrompt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("character(1)")
                        .HasColumnName("auth_prompt")
                        .HasDefaultValueSql("('Y')")
                        .IsFixedLength();

                    b.Property<string>("DisplayName")
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("display_name");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(750)
                        .IsUnicode(false)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("email_address");

                    b.Property<byte?>("FailedLoginCnt")
                        .HasColumnType("smallint")
                        .HasColumnName("failed_login_cnt");

                    b.Property<DateTime?>("FailedLoginDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("failed_login_dt");

                    b.Property<string>("IntegratedAuth")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("character(1)")
                        .HasColumnName("integrated_auth")
                        .HasDefaultValueSql("('N')")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<DateTime>("PasswordDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_dt")
                        .HasDefaultValueSql("(now())");

                    b.Property<string>("PasswordHints")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character(30)")
                        .HasColumnName("password_hints")
                        .IsFixedLength();

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PwresetFlg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("character(1)")
                        .HasColumnName("pwreset_flg")
                        .HasDefaultValueSql("('N')")
                        .IsFixedLength();

                    b.HasKey("KsUserId")
                        .HasName("ks_user_PK");

                    b.HasIndex(new[] { "EmailAddress" }, "UQ_ks_user__email_address")
                        .IsUnique();

                    b.ToTable("ks_user", "ks");
                });

            modelBuilder.Entity("ksdata.models.KsUserRoleEntity", b =>
                {
                    b.Property<string>("KsUserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character(60)")
                        .HasColumnName("ks_user_id")
                        .IsFixedLength();

                    b.Property<string>("ResourceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character(20)")
                        .HasColumnName("resource_type")
                        .IsFixedLength();

                    b.Property<string>("ResourceName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character(20)")
                        .HasColumnName("resource_name")
                        .IsFixedLength();

                    b.Property<int>("RoleNo")
                        .HasColumnType("integer")
                        .HasColumnName("role_no");

                    b.HasKey("KsUserId", "ResourceType", "ResourceName", "RoleNo")
                        .HasName("pk_ks_user_role");

                    b.ToTable("ks_user_role", "ks");
                });

            modelBuilder.Entity("ksdata.models.KsUserTokenEntity", b =>
                {
                    b.Property<int>("TokenNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("token_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenNo"));

                    b.Property<DateTime>("ExpirationDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_dt");

                    b.Property<string>("KsUserId")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character(60)")
                        .HasColumnName("ks_user_id")
                        .IsFixedLength();

                    b.Property<Guid>("Selector")
                        .HasColumnType("uuid")
                        .HasColumnName("selector");

                    b.Property<byte[]>("ValidatorHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea")
                        .HasColumnName("validator_hash")
                        .IsFixedLength();

                    b.HasKey("TokenNo")
                        .HasName("pk_ks_user_token");

                    b.HasIndex("KsUserId");

                    b.ToTable("ks_user_token", "ks");
                });

            modelBuilder.Entity("ksdata.models.PasswordHistoryEntity", b =>
                {
                    b.Property<string>("KsUserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("character(60)")
                        .HasColumnName("ks_user_id")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password");

                    b.Property<DateTime>("CreateDt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_dt");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_salt");

                    b.HasKey("KsUserId", "Password")
                        .HasName("password_history_PK");

                    b.ToTable("password_history", "ks");
                });

            modelBuilder.Entity("ksdata.models.KsLoginFailureEntity", b =>
                {
                    b.HasOne("ksdata.models.KsUserEntity", "User")
                        .WithMany("LoginFailures")
                        .HasForeignKey("KsUserId")
                        .IsRequired()
                        .HasConstraintName("ks_user_ks_user_login_failure_FK1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ksdata.models.KsUserRoleEntity", b =>
                {
                    b.HasOne("ksdata.models.KsUserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("KsUserId")
                        .IsRequired()
                        .HasConstraintName("fk_ks_user_role_ks_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ksdata.models.KsUserTokenEntity", b =>
                {
                    b.HasOne("ksdata.models.KsUserEntity", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("KsUserId")
                        .IsRequired()
                        .HasConstraintName("ks_user_ks_user_token_FK1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ksdata.models.PasswordHistoryEntity", b =>
                {
                    b.HasOne("ksdata.models.KsUserEntity", "User")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("KsUserId")
                        .IsRequired()
                        .HasConstraintName("ks_user_password_history_FK1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ksdata.models.KsUserEntity", b =>
                {
                    b.Navigation("LoginFailures");

                    b.Navigation("PasswordHistories");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
